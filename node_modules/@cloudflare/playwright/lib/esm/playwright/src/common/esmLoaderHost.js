import require$$0 from 'node:module';
import url from 'node:url';
import { addToCompilationCache, serializeCompilationCache } from '../../../mocks/compilationCache.js';
import { PortTransport } from '../transform/portTransport.js';
import { singleTSConfig, transformConfig } from '../../../mocks/transform.js';

let loaderChannel;
if (globalThis.__esmLoaderPortPreV20)
  loaderChannel = createPortTransport(globalThis.__esmLoaderPortPreV20);
function registerESMLoader() {
  const { port1, port2 } = new MessageChannel();
  require$$0.register(url.pathToFileURL(require.resolve("../transform/esmLoader")), {
    data: { port: port2 },
    transferList: [port2]
  });
  loaderChannel = createPortTransport(port1);
}
function createPortTransport(port) {
  return new PortTransport(port, async (method, params) => {
    if (method === "pushToCompilationCache")
      addToCompilationCache(params.cache);
  });
}
async function configureESMLoader() {
  if (!loaderChannel)
    return;
  await loaderChannel.send("setSingleTSConfig", { tsconfig: singleTSConfig() });
  await loaderChannel.send("addToCompilationCache", { cache: serializeCompilationCache() });
}
async function configureESMLoaderTransformConfig() {
  if (!loaderChannel)
    return;
  await loaderChannel.send("setSingleTSConfig", { tsconfig: singleTSConfig() });
  await loaderChannel.send("setTransformConfig", { config: transformConfig() });
}

export { configureESMLoader, configureESMLoaderTransformConfig, registerESMLoader };
