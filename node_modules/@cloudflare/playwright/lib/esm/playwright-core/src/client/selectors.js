import { ChannelOwner } from './channelOwner.js';
import { evaluationScript } from './clientHelper.js';
import { testIdAttributeName, setTestIdAttribute } from './locator.js';
import { emptyPlatform } from './platform.js';

let platform = emptyPlatform;
function setPlatformForSelectors(p) {
  platform = p;
}
class Selectors {
  constructor() {
    this._channels = /* @__PURE__ */ new Set();
    this._registrations = [];
  }
  async register(name, script, options = {}) {
    const source = await evaluationScript(platform, script, void 0, false);
    const params = { ...options, name, source };
    for (const channel of this._channels)
      await channel._channel.register(params);
    this._registrations.push(params);
  }
  setTestIdAttribute(attributeName) {
    setTestIdAttribute(attributeName);
    for (const channel of this._channels)
      channel._channel.setTestIdAttributeName({ testIdAttributeName: attributeName }).catch(() => {
      });
  }
  _addChannel(channel) {
    this._channels.add(channel);
    for (const params of this._registrations) {
      channel._channel.register(params).catch(() => {
      });
      channel._channel.setTestIdAttributeName({ testIdAttributeName: testIdAttributeName() }).catch(() => {
      });
    }
  }
  _removeChannel(channel) {
    this._channels.delete(channel);
  }
}
class SelectorsOwner extends ChannelOwner {
  static from(browser) {
    return browser._object;
  }
}

export { Selectors, SelectorsOwner, setPlatformForSelectors };
