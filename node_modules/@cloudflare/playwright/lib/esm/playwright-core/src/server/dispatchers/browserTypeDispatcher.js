import { BrowserContextDispatcher } from './browserContextDispatcher.js';
import { BrowserDispatcher } from './browserDispatcher.js';
import { Dispatcher } from './dispatcher.js';

class BrowserTypeDispatcher extends Dispatcher {
  constructor(scope, browserType) {
    super(scope, browserType, "BrowserType", {
      executablePath: browserType.executablePath(),
      name: browserType.name()
    });
    this._type_BrowserType = true;
  }
  async launch(params, metadata) {
    const browser = await this._object.launch(metadata, params);
    return { browser: new BrowserDispatcher(this, browser) };
  }
  async launchPersistentContext(params, metadata) {
    const browserContext = await this._object.launchPersistentContext(metadata, params.userDataDir, params);
    return { context: new BrowserContextDispatcher(this, browserContext) };
  }
  async connectOverCDP(params, metadata) {
    const browser = await this._object.connectOverCDP(metadata, params.endpointURL, params);
    const browserDispatcher = new BrowserDispatcher(this, browser);
    return {
      browser: browserDispatcher,
      defaultContext: browser._defaultContext ? new BrowserContextDispatcher(browserDispatcher, browser._defaultContext) : void 0
    };
  }
}

export { BrowserTypeDispatcher };
