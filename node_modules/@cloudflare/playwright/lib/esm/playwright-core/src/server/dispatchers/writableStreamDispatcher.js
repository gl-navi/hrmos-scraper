import fs from '../../../../bundles/fs.js';
import { Dispatcher } from './dispatcher.js';
import { createGuid } from '../utils/crypto.js';

class WritableStreamDispatcher extends Dispatcher {
  constructor(scope, streamOrDirectory, lastModifiedMs) {
    super(scope, { guid: "writableStream@" + createGuid(), streamOrDirectory }, "WritableStream", {});
    this._type_WritableStream = true;
    this._lastModifiedMs = lastModifiedMs;
  }
  async write(params) {
    if (typeof this._object.streamOrDirectory === "string")
      throw new Error("Cannot write to a directory");
    const stream = this._object.streamOrDirectory;
    await new Promise((fulfill, reject) => {
      stream.write(params.binary, (error) => {
        if (error)
          reject(error);
        else
          fulfill();
      });
    });
  }
  async close() {
    if (typeof this._object.streamOrDirectory === "string")
      throw new Error("Cannot close a directory");
    const stream = this._object.streamOrDirectory;
    await new Promise((fulfill) => stream.end(fulfill));
    if (this._lastModifiedMs)
      await fs.promises.utimes(this.path(), new Date(this._lastModifiedMs), new Date(this._lastModifiedMs));
  }
  path() {
    if (typeof this._object.streamOrDirectory === "string")
      return this._object.streamOrDirectory;
    return this._object.streamOrDirectory.path;
  }
}

export { WritableStreamDispatcher };
