import { builtins } from '../utils/isomorphic/builtins.js';
import { source } from '../utils/isomorphic/utilityScriptSerializers.js';

function addPageBinding(playwrightBinding, bindingName, needsHandle, utilityScriptSerializersFactory, builtins2) {
  const { serializeAsCallArgument } = utilityScriptSerializersFactory(builtins2);
  const binding = globalThis[playwrightBinding];
  globalThis[bindingName] = (...args) => {
    const me = globalThis[bindingName];
    if (needsHandle && args.slice(1).some((arg) => arg !== void 0))
      throw new Error(`exposeBindingHandle supports a single argument, ${args.length} received`);
    let callbacks = me["callbacks"];
    if (!callbacks) {
      callbacks = new builtins2.Map();
      me["callbacks"] = callbacks;
    }
    const seq = (me["lastSeq"] || 0) + 1;
    me["lastSeq"] = seq;
    let handles = me["handles"];
    if (!handles) {
      handles = new builtins2.Map();
      me["handles"] = handles;
    }
    const promise = new Promise((resolve, reject) => callbacks.set(seq, { resolve, reject }));
    let payload;
    if (needsHandle) {
      handles.set(seq, args[0]);
      payload = { name: bindingName, seq };
    } else {
      const serializedArgs = [];
      for (let i = 0; i < args.length; i++) {
        serializedArgs[i] = serializeAsCallArgument(args[i], (v) => {
          return { fallThrough: v };
        });
      }
      payload = { name: bindingName, seq, serializedArgs };
    }
    binding(JSON.stringify(payload));
    return promise;
  };
  globalThis[bindingName].__installed = true;
}
function takeBindingHandle(arg) {
  const handles = globalThis[arg.name]["handles"];
  const handle = handles.get(arg.seq);
  handles.delete(arg.seq);
  return handle;
}
function deliverBindingResult(arg) {
  const callbacks = globalThis[arg.name]["callbacks"];
  if ("error" in arg)
    callbacks.get(arg.seq).reject(arg.error);
  else
    callbacks.get(arg.seq).resolve(arg.result);
  callbacks.delete(arg.seq);
}
function createPageBindingScript(playwrightBinding, name, needsHandle) {
  const script = `(${addPageBinding.toString()})(${JSON.stringify(playwrightBinding)}, ${JSON.stringify(name)}, ${needsHandle}, (${source}), (${builtins})())`;
  return `((__name => (${script}))(t => t))`;
}

export { createPageBindingScript, deliverBindingResult, takeBindingHandle };
