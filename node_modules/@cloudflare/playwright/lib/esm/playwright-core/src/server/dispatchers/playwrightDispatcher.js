import { SocksProxy } from '../utils/socksProxy.js';
import { GlobalAPIRequestContext } from '../fetch.js';
import { AndroidDispatcher, AndroidDeviceDispatcher } from './androidDispatcher.js';
import { ConnectedBrowserDispatcher } from './browserDispatcher.js';
import { BrowserTypeDispatcher } from './browserTypeDispatcher.js';
import { Dispatcher } from './dispatcher.js';
import { ElectronDispatcher } from './electronDispatcher.js';
import { LocalUtilsDispatcher } from './localUtilsDispatcher.js';
import { APIRequestContextDispatcher } from './networkDispatchers.js';
import { SelectorsDispatcher } from './selectorsDispatcher.js';
import { createGuid } from '../utils/crypto.js';
import { eventsHelper } from '../utils/eventsHelper.js';

class PlaywrightDispatcher extends Dispatcher {
  constructor(scope, playwright, socksProxy, preLaunchedBrowser, prelaunchedAndroidDevice) {
    const browserDispatcher = preLaunchedBrowser ? new ConnectedBrowserDispatcher(scope, preLaunchedBrowser) : void 0;
    const android = new AndroidDispatcher(scope, playwright.android);
    const prelaunchedAndroidDeviceDispatcher = prelaunchedAndroidDevice ? new AndroidDeviceDispatcher(android, prelaunchedAndroidDevice) : void 0;
    super(scope, playwright, "Playwright", {
      chromium: new BrowserTypeDispatcher(scope, playwright.chromium),
      firefox: new BrowserTypeDispatcher(scope, playwright.firefox),
      webkit: new BrowserTypeDispatcher(scope, playwright.webkit),
      bidiChromium: new BrowserTypeDispatcher(scope, playwright.bidiChromium),
      bidiFirefox: new BrowserTypeDispatcher(scope, playwright.bidiFirefox),
      android,
      electron: new ElectronDispatcher(scope, playwright.electron),
      utils: playwright.options.isServer ? void 0 : new LocalUtilsDispatcher(scope, playwright),
      selectors: new SelectorsDispatcher(scope, browserDispatcher?.selectors || playwright.selectors),
      preLaunchedBrowser: browserDispatcher,
      preConnectedAndroidDevice: prelaunchedAndroidDeviceDispatcher,
      socksSupport: socksProxy ? new SocksSupportDispatcher(scope, socksProxy) : void 0
    });
    this._type_Playwright = true;
    this._browserDispatcher = browserDispatcher;
  }
  async newRequest(params) {
    const request = new GlobalAPIRequestContext(this._object, params);
    return { request: APIRequestContextDispatcher.from(this.parentScope(), request) };
  }
  async cleanup() {
    await this._browserDispatcher?.cleanupContexts();
  }
}
class SocksSupportDispatcher extends Dispatcher {
  constructor(scope, socksProxy) {
    super(scope, { guid: "socksSupport@" + createGuid() }, "SocksSupport", {});
    this._type_SocksSupport = true;
    this._socksProxy = socksProxy;
    this._socksListeners = [
      eventsHelper.addEventListener(socksProxy, SocksProxy.Events.SocksRequested, (payload) => this._dispatchEvent("socksRequested", payload)),
      eventsHelper.addEventListener(socksProxy, SocksProxy.Events.SocksData, (payload) => this._dispatchEvent("socksData", payload)),
      eventsHelper.addEventListener(socksProxy, SocksProxy.Events.SocksClosed, (payload) => this._dispatchEvent("socksClosed", payload))
    ];
  }
  async socksConnected(params) {
    this._socksProxy?.socketConnected(params);
  }
  async socksFailed(params) {
    this._socksProxy?.socketFailed(params);
  }
  async socksData(params) {
    this._socksProxy?.sendSocketData(params);
  }
  async socksError(params) {
    this._socksProxy?.sendSocketError(params);
  }
  async socksEnd(params) {
    this._socksProxy?.sendSocketEnd(params);
  }
  _onDispose() {
    eventsHelper.removeEventListeners(this._socksListeners);
  }
}

export { PlaywrightDispatcher };
