import require$$0 from '../../../../_virtual/empty.js';
import { EventEmitter } from 'node:events';
import fs from '../../../../bundles/fs.js';
import path from 'node:path';
import { isUnderTest } from '../utils/debug.js';
import { mime } from '../../utilsBundle.js';
import { serverSideCallMetadata } from '../instrumentation.js';
import { syncLocalStorageWithSettings, launchApp } from '../launchApp.js';
import { ProgressController } from '../progress.js';

class EmptyRecorderApp extends EventEmitter {
  async close() {
  }
  async setPaused(paused) {
  }
  async setMode(mode) {
  }
  async setRunningFile(file) {
  }
  async elementPicked(elementInfo, userGesture) {
  }
  async updateCallLogs(callLogs) {
  }
  async setSources(sources, primaryPageURL) {
  }
  async setActions(actions, sources) {
  }
}
class RecorderApp extends EventEmitter {
  constructor(recorder, page, wsEndpoint) {
    super();
    this.setMaxListeners(0);
    this._recorder = recorder;
    this._page = page;
    this.wsEndpointForTest = wsEndpoint;
  }
  async close() {
    await this._page.context().close({ reason: "Recorder window closed" });
  }
  async _init() {
    await syncLocalStorageWithSettings(this._page, "recorder");
    await this._page._setServerRequestInterceptor((route) => {
      if (!route.request().url().startsWith("https://playwright/"))
        return false;
      const uri = route.request().url().substring("https://playwright/".length);
      const file = require.resolve("../../vite/recorder/" + uri);
      fs.promises.readFile(file).then((buffer) => {
        route.fulfill({
          status: 200,
          headers: [
            { name: "Content-Type", value: mime.getType(path.extname(file)) || "application/octet-stream" }
          ],
          body: buffer.toString("base64"),
          isBase64: true
        }).catch(() => {
        });
      });
      return true;
    });
    await this._page.exposeBinding("dispatch", false, (_, data) => this.emit("event", data));
    this._page.once("close", () => {
      this.emit("close");
      this._page.context().close({ reason: "Recorder window closed" }).catch(() => {
      });
    });
    const mainFrame = this._page.mainFrame();
    await mainFrame.goto(serverSideCallMetadata(), process.env.PW_HMR ? "http://localhost:44225" : "https://playwright/index.html");
  }
  static factory(context) {
    return async (recorder) => {
      if (process.env.PW_CODEGEN_NO_INSPECTOR)
        return new EmptyRecorderApp();
      return await RecorderApp._open(recorder, context);
    };
  }
  static async _open(recorder, inspectedContext) {
    const sdkLanguage = inspectedContext.attribution.playwright.options.sdkLanguage;
    const headed = !!inspectedContext._browser.options.headful;
    const recorderPlaywright = require$$0.createPlaywright({ sdkLanguage: "javascript", isInternalPlaywright: true });
    const { context, page } = await launchApp(recorderPlaywright.chromium, {
      sdkLanguage,
      windowSize: { width: 600, height: 600 },
      windowPosition: { x: 1020, y: 10 },
      persistentContextOptions: {
        noDefaultViewport: true,
        headless: !!process.env.PWTEST_CLI_HEADLESS || isUnderTest() && !headed,
        useWebSocket: isUnderTest(),
        handleSIGINT: recorder.handleSIGINT,
        executablePath: inspectedContext._browser.options.isChromium ? inspectedContext._browser.options.customExecutablePath : void 0,
        // Use the same channel as the inspected context to guarantee that the browser is installed.
        channel: inspectedContext._browser.options.isChromium ? inspectedContext._browser.options.channel : void 0
      }
    });
    const controller = new ProgressController(serverSideCallMetadata(), context._browser);
    await controller.run(async (progress) => {
      await context._browser._defaultContext._loadDefaultContextAsIs(progress);
    });
    const result = new RecorderApp(recorder, page, context._browser.options.wsEndpoint);
    await result._init();
    return result;
  }
  async setMode(mode) {
    await this._page.mainFrame().evaluateExpression(((mode2) => {
      window.playwrightSetMode(mode2);
    }).toString(), { isFunction: true }, mode).catch(() => {
    });
  }
  async setRunningFile(file) {
    await this._page.mainFrame().evaluateExpression(((file2) => {
      window.playwrightSetRunningFile(file2);
    }).toString(), { isFunction: true }, file).catch(() => {
    });
  }
  async setPaused(paused) {
    await this._page.mainFrame().evaluateExpression(((paused2) => {
      window.playwrightSetPaused(paused2);
    }).toString(), { isFunction: true }, paused).catch(() => {
    });
  }
  async setSources(sources, primaryPageURL) {
    await this._page.mainFrame().evaluateExpression((({ sources: sources2, primaryPageURL: primaryPageURL2 }) => {
      window.playwrightSetSources(sources2, primaryPageURL2);
    }).toString(), { isFunction: true }, { sources, primaryPageURL }).catch(() => {
    });
    if (process.env.PWTEST_CLI_IS_UNDER_TEST && sources.length) {
      if (process._didSetSourcesForTest(sources[0].text))
        this.close();
    }
  }
  async setActions(actions, sources) {
  }
  async elementPicked(elementInfo, userGesture) {
    if (userGesture)
      this._page.bringToFront();
    await this._page.mainFrame().evaluateExpression(((param) => {
      window.playwrightElementPicked(param.elementInfo, param.userGesture);
    }).toString(), { isFunction: true }, { elementInfo, userGesture }).catch(() => {
    });
  }
  async updateCallLogs(callLogs) {
    await this._page.mainFrame().evaluateExpression(((callLogs2) => {
      window.playwrightUpdateLogs(callLogs2);
    }).toString(), { isFunction: true }, callLogs).catch(() => {
    });
  }
}

export { EmptyRecorderApp, RecorderApp };
