import { EventEmitter } from 'node:events';
import { performAction } from './recorderRunner.js';
import { collapseActions } from './recorderUtils.js';
import { isUnderTest } from '../utils/debug.js';
import { monotonicTime } from '../../utils/isomorphic/time.js';

class RecorderCollection extends EventEmitter {
  constructor(pageAliases) {
    super();
    this._actions = [];
    this._enabled = false;
    this._pageAliases = pageAliases;
  }
  restart() {
    this._actions = [];
    this.emit("change", []);
  }
  setEnabled(enabled) {
    this._enabled = enabled;
  }
  async performAction(actionInContext) {
    await this._addAction(actionInContext, async () => {
      await performAction(this._pageAliases, actionInContext);
    });
  }
  addRecordedAction(actionInContext) {
    if (["openPage", "closePage"].includes(actionInContext.action.name)) {
      this._actions.push(actionInContext);
      this._fireChange();
      return;
    }
    this._addAction(actionInContext).catch(() => {
    });
  }
  async _addAction(actionInContext, callback) {
    if (!this._enabled)
      return;
    if (actionInContext.action.name === "openPage" || actionInContext.action.name === "closePage") {
      this._actions.push(actionInContext);
      this._fireChange();
      return;
    }
    this._actions.push(actionInContext);
    this._fireChange();
    await callback?.().catch();
    actionInContext.endTime = monotonicTime();
  }
  signal(pageAlias, frame, signal) {
    if (!this._enabled)
      return;
    if (signal.name === "navigation" && frame._page.mainFrame() === frame) {
      const timestamp = monotonicTime();
      const lastAction = this._actions[this._actions.length - 1];
      const signalThreshold = isUnderTest() ? 500 : 5e3;
      let generateGoto = false;
      if (!lastAction)
        generateGoto = true;
      else if (lastAction.action.name !== "click" && lastAction.action.name !== "press" && lastAction.action.name !== "fill")
        generateGoto = true;
      else if (timestamp - lastAction.startTime > signalThreshold)
        generateGoto = true;
      if (generateGoto) {
        this.addRecordedAction({
          frame: {
            pageAlias,
            framePath: []
          },
          action: {
            name: "navigate",
            url: frame.url(),
            signals: []
          },
          startTime: timestamp,
          endTime: timestamp
        });
      }
      return;
    }
    if (this._actions.length) {
      this._actions[this._actions.length - 1].action.signals.push(signal);
      this._fireChange();
      return;
    }
  }
  _fireChange() {
    if (!this._enabled)
      return;
    this.emit("change", collapseActions(this._actions));
  }
}

export { RecorderCollection };
