'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const builtins = require('./builtins.js');
const time = require('./time.js');

async function raceAgainstDeadline(cb, deadline) {
  let timer;
  return Promise.race([
    cb().then((result) => {
      return { result, timedOut: false };
    }),
    new Promise((resolve) => {
      const kMaxDeadline = 2147483647;
      const timeout = (deadline || kMaxDeadline) - time.monotonicTime();
      timer = builtins.setTimeout(() => resolve({ timedOut: true }), timeout);
    })
  ]).finally(() => {
    builtins.clearTimeout(timer);
  });
}
async function pollAgainstDeadline(callback, deadline, pollIntervals = [100, 250, 500, 1e3]) {
  const lastPollInterval = pollIntervals.pop() ?? 1e3;
  let lastResult;
  const wrappedCallback = () => Promise.resolve().then(callback);
  while (true) {
    const time$1 = time.monotonicTime();
    if (deadline && time$1 >= deadline)
      break;
    const received = await raceAgainstDeadline(wrappedCallback, deadline);
    if (received.timedOut)
      break;
    lastResult = received.result.result;
    if (!received.result.continuePolling)
      return { result: lastResult, timedOut: false };
    const interval = pollIntervals.shift() ?? lastPollInterval;
    if (deadline && deadline <= time.monotonicTime() + interval)
      break;
    await new Promise((x) => builtins.setTimeout(x, interval));
  }
  return { timedOut: true, result: lastResult };
}

exports.pollAgainstDeadline = pollAgainstDeadline;
exports.raceAgainstDeadline = raceAgainstDeadline;
