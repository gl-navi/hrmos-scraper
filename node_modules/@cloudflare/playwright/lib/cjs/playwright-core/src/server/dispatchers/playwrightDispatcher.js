'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const socksProxy = require('../utils/socksProxy.js');
const fetch = require('../fetch.js');
const androidDispatcher = require('./androidDispatcher.js');
const browserDispatcher = require('./browserDispatcher.js');
const browserTypeDispatcher = require('./browserTypeDispatcher.js');
const dispatcher = require('./dispatcher.js');
const electronDispatcher = require('./electronDispatcher.js');
const localUtilsDispatcher = require('./localUtilsDispatcher.js');
const networkDispatchers = require('./networkDispatchers.js');
const selectorsDispatcher = require('./selectorsDispatcher.js');
const crypto = require('../utils/crypto.js');
const eventsHelper = require('../utils/eventsHelper.js');

class PlaywrightDispatcher extends dispatcher.Dispatcher {
  constructor(scope, playwright, socksProxy, preLaunchedBrowser, prelaunchedAndroidDevice) {
    const browserDispatcher$1 = preLaunchedBrowser ? new browserDispatcher.ConnectedBrowserDispatcher(scope, preLaunchedBrowser) : void 0;
    const android = new androidDispatcher.AndroidDispatcher(scope, playwright.android);
    const prelaunchedAndroidDeviceDispatcher = prelaunchedAndroidDevice ? new androidDispatcher.AndroidDeviceDispatcher(android, prelaunchedAndroidDevice) : void 0;
    super(scope, playwright, "Playwright", {
      chromium: new browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright.chromium),
      firefox: new browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright.firefox),
      webkit: new browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright.webkit),
      bidiChromium: new browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright.bidiChromium),
      bidiFirefox: new browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright.bidiFirefox),
      android,
      electron: new electronDispatcher.ElectronDispatcher(scope, playwright.electron),
      utils: playwright.options.isServer ? void 0 : new localUtilsDispatcher.LocalUtilsDispatcher(scope, playwright),
      selectors: new selectorsDispatcher.SelectorsDispatcher(scope, browserDispatcher$1?.selectors || playwright.selectors),
      preLaunchedBrowser: browserDispatcher$1,
      preConnectedAndroidDevice: prelaunchedAndroidDeviceDispatcher,
      socksSupport: socksProxy ? new SocksSupportDispatcher(scope, socksProxy) : void 0
    });
    this._type_Playwright = true;
    this._browserDispatcher = browserDispatcher$1;
  }
  async newRequest(params) {
    const request = new fetch.GlobalAPIRequestContext(this._object, params);
    return { request: networkDispatchers.APIRequestContextDispatcher.from(this.parentScope(), request) };
  }
  async cleanup() {
    await this._browserDispatcher?.cleanupContexts();
  }
}
class SocksSupportDispatcher extends dispatcher.Dispatcher {
  constructor(scope, socksProxy$1) {
    super(scope, { guid: "socksSupport@" + crypto.createGuid() }, "SocksSupport", {});
    this._type_SocksSupport = true;
    this._socksProxy = socksProxy$1;
    this._socksListeners = [
      eventsHelper.eventsHelper.addEventListener(socksProxy$1, socksProxy.SocksProxy.Events.SocksRequested, (payload) => this._dispatchEvent("socksRequested", payload)),
      eventsHelper.eventsHelper.addEventListener(socksProxy$1, socksProxy.SocksProxy.Events.SocksData, (payload) => this._dispatchEvent("socksData", payload)),
      eventsHelper.eventsHelper.addEventListener(socksProxy$1, socksProxy.SocksProxy.Events.SocksClosed, (payload) => this._dispatchEvent("socksClosed", payload))
    ];
  }
  async socksConnected(params) {
    this._socksProxy?.socketConnected(params);
  }
  async socksFailed(params) {
    this._socksProxy?.socketFailed(params);
  }
  async socksData(params) {
    this._socksProxy?.sendSocketData(params);
  }
  async socksError(params) {
    this._socksProxy?.sendSocketError(params);
  }
  async socksEnd(params) {
    this._socksProxy?.sendSocketEnd(params);
  }
  _onDispose() {
    eventsHelper.eventsHelper.removeEventListeners(this._socksListeners);
  }
}

exports.PlaywrightDispatcher = PlaywrightDispatcher;
