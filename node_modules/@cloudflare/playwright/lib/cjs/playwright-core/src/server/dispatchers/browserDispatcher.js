'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const browser = require('../browser.js');
const browserContextDispatcher = require('./browserContextDispatcher.js');
const cdpSessionDispatcher = require('./cdpSessionDispatcher.js');
const dispatcher = require('./dispatcher.js');
const browserContext = require('../browserContext.js');
const selectors = require('../selectors.js');
const artifactDispatcher = require('./artifactDispatcher.js');

class BrowserDispatcher extends dispatcher.Dispatcher {
  constructor(scope, browser$1) {
    super(scope, browser$1, "Browser", { version: browser$1.version(), name: browser$1.options.name });
    this._type_Browser = true;
    this.addObjectListener(browser.Browser.Events.Disconnected, () => this._didClose());
  }
  _didClose() {
    this._dispatchEvent("close");
    this._dispose();
  }
  async newContext(params, metadata) {
    const context = await this._object.newContext(metadata, params);
    return { context: new browserContextDispatcher.BrowserContextDispatcher(this, context) };
  }
  async newContextForReuse(params, metadata) {
    return await newContextForReuse(this._object, this, params, null, metadata);
  }
  async stopPendingOperations(params, metadata) {
    await this._object.stopPendingOperations(params.reason);
  }
  async close(params, metadata) {
    metadata.potentiallyClosesScope = true;
    await this._object.close(params);
  }
  async killForTests(_, metadata) {
    metadata.potentiallyClosesScope = true;
    await this._object.killForTests();
  }
  async defaultUserAgentForTest() {
    return { userAgent: this._object.userAgent() };
  }
  async newBrowserCDPSession() {
    if (!this._object.options.isChromium)
      throw new Error(`CDP session is only available in Chromium`);
    const crBrowser = this._object;
    return { session: new cdpSessionDispatcher.CDPSessionDispatcher(this, await crBrowser.newBrowserCDPSession()) };
  }
  async startTracing(params) {
    if (!this._object.options.isChromium)
      throw new Error(`Tracing is only available in Chromium`);
    const crBrowser = this._object;
    await crBrowser.startTracing(params.page ? params.page._object : void 0, params);
  }
  async stopTracing() {
    if (!this._object.options.isChromium)
      throw new Error(`Tracing is only available in Chromium`);
    const crBrowser = this._object;
    return { artifact: artifactDispatcher.ArtifactDispatcher.from(this, await crBrowser.stopTracing()) };
  }
}
class ConnectedBrowserDispatcher extends dispatcher.Dispatcher {
  constructor(scope, browser) {
    super(scope, browser, "Browser", { version: browser.version(), name: browser.options.name });
    this._type_Browser = true;
    this._contexts = /* @__PURE__ */ new Set();
    this.selectors = new selectors.Selectors();
  }
  async newContext(params, metadata) {
    if (params.recordVideo)
      params.recordVideo.dir = this._object.options.artifactsDir;
    const context = await this._object.newContext(metadata, params);
    this._contexts.add(context);
    context.setSelectors(this.selectors);
    context.on(browserContext.BrowserContext.Events.Close, () => this._contexts.delete(context));
    return { context: new browserContextDispatcher.BrowserContextDispatcher(this, context) };
  }
  async newContextForReuse(params, metadata) {
    return await newContextForReuse(this._object, this, params, this.selectors, metadata);
  }
  async stopPendingOperations(params, metadata) {
    await this._object.stopPendingOperations(params.reason);
  }
  async close() {
  }
  async killForTests() {
  }
  async defaultUserAgentForTest() {
    throw new Error("Client should not send us Browser.defaultUserAgentForTest");
  }
  async newBrowserCDPSession() {
    if (!this._object.options.isChromium)
      throw new Error(`CDP session is only available in Chromium`);
    const crBrowser = this._object;
    return { session: new cdpSessionDispatcher.CDPSessionDispatcher(this, await crBrowser.newBrowserCDPSession()) };
  }
  async startTracing(params) {
    if (!this._object.options.isChromium)
      throw new Error(`Tracing is only available in Chromium`);
    const crBrowser = this._object;
    await crBrowser.startTracing(params.page ? params.page._object : void 0, params);
  }
  async stopTracing() {
    if (!this._object.options.isChromium)
      throw new Error(`Tracing is only available in Chromium`);
    const crBrowser = this._object;
    return { artifact: artifactDispatcher.ArtifactDispatcher.from(this, await crBrowser.stopTracing()) };
  }
  async cleanupContexts() {
    await Promise.all(Array.from(this._contexts).map((context) => context.close({ reason: "Global context cleanup (connection terminated)" })));
  }
}
async function newContextForReuse(browser, scope, params, selectors, metadata) {
  const { context, needsReset } = await browser.newContextForReuse(params, metadata);
  if (needsReset) {
    const oldContextDispatcher = dispatcher.existingDispatcher(context);
    if (oldContextDispatcher)
      oldContextDispatcher._dispose();
    await context.resetForReuse(metadata, params);
  }
  if (selectors)
    context.setSelectors(selectors);
  const contextDispatcher = new browserContextDispatcher.BrowserContextDispatcher(scope, context);
  return { context: contextDispatcher };
}

exports.BrowserDispatcher = BrowserDispatcher;
exports.ConnectedBrowserDispatcher = ConnectedBrowserDispatcher;
