'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const browserContextDispatcher = require('./browserContextDispatcher.js');
const browserDispatcher = require('./browserDispatcher.js');
const dispatcher = require('./dispatcher.js');

class BrowserTypeDispatcher extends dispatcher.Dispatcher {
  constructor(scope, browserType) {
    super(scope, browserType, "BrowserType", {
      executablePath: browserType.executablePath(),
      name: browserType.name()
    });
    this._type_BrowserType = true;
  }
  async launch(params, metadata) {
    const browser = await this._object.launch(metadata, params);
    return { browser: new browserDispatcher.BrowserDispatcher(this, browser) };
  }
  async launchPersistentContext(params, metadata) {
    const browserContext = await this._object.launchPersistentContext(metadata, params.userDataDir, params);
    return { context: new browserContextDispatcher.BrowserContextDispatcher(this, browserContext) };
  }
  async connectOverCDP(params, metadata) {
    const browser = await this._object.connectOverCDP(metadata, params.endpointURL, params);
    const browserDispatcher$1 = new browserDispatcher.BrowserDispatcher(this, browser);
    return {
      browser: browserDispatcher$1,
      defaultContext: browser._defaultContext ? new browserContextDispatcher.BrowserContextDispatcher(browserDispatcher$1, browser._defaultContext) : void 0
    };
  }
}

exports.BrowserTypeDispatcher = BrowserTypeDispatcher;
