'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const channelOwner = require('./channelOwner.js');
const clientHelper = require('./clientHelper.js');
const locator = require('./locator.js');
const platform$1 = require('./platform.js');

let platform = platform$1.emptyPlatform;
function setPlatformForSelectors(p) {
  platform = p;
}
class Selectors {
  constructor() {
    this._channels = /* @__PURE__ */ new Set();
    this._registrations = [];
  }
  async register(name, script, options = {}) {
    const source = await clientHelper.evaluationScript(platform, script, void 0, false);
    const params = { ...options, name, source };
    for (const channel of this._channels)
      await channel._channel.register(params);
    this._registrations.push(params);
  }
  setTestIdAttribute(attributeName) {
    locator.setTestIdAttribute(attributeName);
    for (const channel of this._channels)
      channel._channel.setTestIdAttributeName({ testIdAttributeName: attributeName }).catch(() => {
      });
  }
  _addChannel(channel) {
    this._channels.add(channel);
    for (const params of this._registrations) {
      channel._channel.register(params).catch(() => {
      });
      channel._channel.setTestIdAttributeName({ testIdAttributeName: locator.testIdAttributeName() }).catch(() => {
      });
    }
  }
  _removeChannel(channel) {
    this._channels.delete(channel);
  }
}
class SelectorsOwner extends channelOwner.ChannelOwner {
  static from(browser) {
    return browser._object;
  }
}

exports.Selectors = Selectors;
exports.SelectorsOwner = SelectorsOwner;
exports.setPlatformForSelectors = setPlatformForSelectors;
