import { z } from 'zod';
import { defineTool } from './tool.js';

const handleDialog = (captureSnapshot) => defineTool({
  capability: "core",
  schema: {
    name: "browser_handle_dialog",
    description: "Handle a dialog",
    inputSchema: z.object({
      accept: z.coerce.boolean().describe("Whether to accept the dialog."),
      promptText: z.string().optional().describe("The text of the prompt in case of a prompt dialog.")
    })
  },
  handle: async (context, params) => {
    const dialogState = context.modalStates().find((state) => state.type === "dialog");
    if (!dialogState)
      throw new Error("No dialog visible");
    if (params.accept)
      await dialogState.dialog.accept(params.promptText);
    else
      await dialogState.dialog.dismiss();
    context.clearModalState(dialogState);
    const code = [
      `// <internal code to handle "${dialogState.dialog.type()}" dialog>`
    ];
    return {
      code,
      captureSnapshot,
      waitForNetwork: false
    };
  },
  clearsModalState: "dialog"
});
const dialogs = (captureSnapshot) => [
  handleDialog(captureSnapshot)
];

export { dialogs as default };
