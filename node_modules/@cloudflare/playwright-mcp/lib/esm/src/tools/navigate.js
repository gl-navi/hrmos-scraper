import { z } from 'zod';
import { defineTool } from './tool.js';

const navigate = (captureSnapshot) => defineTool({
  capability: "core",
  schema: {
    name: "browser_navigate",
    description: "Navigate to a URL",
    inputSchema: z.object({
      url: z.string().describe("The URL to navigate to")
    })
  },
  handle: async (context, params) => {
    const tab = await context.ensureTab();
    await tab.navigate(params.url);
    const code = [
      `// Navigate to ${params.url}`,
      `await page.goto('${params.url}');`
    ];
    return {
      code,
      captureSnapshot,
      waitForNetwork: false
    };
  }
});
const goBack = (captureSnapshot) => defineTool({
  capability: "history",
  schema: {
    name: "browser_navigate_back",
    description: "Go back to the previous page",
    inputSchema: z.object({})
  },
  handle: async (context) => {
    const tab = await context.ensureTab();
    await tab.page.goBack();
    const code = [
      `// Navigate back`,
      `await page.goBack();`
    ];
    return {
      code,
      captureSnapshot,
      waitForNetwork: false
    };
  }
});
const goForward = (captureSnapshot) => defineTool({
  capability: "history",
  schema: {
    name: "browser_navigate_forward",
    description: "Go forward to the next page",
    inputSchema: z.object({})
  },
  handle: async (context) => {
    const tab = context.currentTabOrDie();
    await tab.page.goForward();
    const code = [
      `// Navigate forward`,
      `await page.goForward();`
    ];
    return {
      code,
      captureSnapshot,
      waitForNetwork: false
    };
  }
});
const navigate$1 = (captureSnapshot) => [
  navigate(captureSnapshot),
  goBack(captureSnapshot),
  goForward(captureSnapshot)
];

export { navigate$1 as default };
