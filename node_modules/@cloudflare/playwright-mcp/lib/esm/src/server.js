import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { ListToolsRequestSchema, ListResourcesRequestSchema, CallToolRequestSchema, ReadResourceRequestSchema } from '@modelcontextprotocol/sdk/types.js';
import { zodToJsonSchema } from 'zod-to-json-schema';
import { Context } from './context.js';

function createServerWithTools(options) {
  const { name, version, tools, resources } = options;
  const context = new Context(tools, options);
  const server = new Server({ name, version }, {
    capabilities: {
      tools: {},
      resources: {}
    }
  });
  server.setRequestHandler(ListToolsRequestSchema, async () => {
    return {
      tools: tools.map((tool) => ({
        name: tool.schema.name,
        description: tool.schema.description,
        inputSchema: zodToJsonSchema(tool.schema.inputSchema)
      }))
    };
  });
  server.setRequestHandler(ListResourcesRequestSchema, async () => {
    return { resources: resources.map((resource) => resource.schema) };
  });
  server.setRequestHandler(CallToolRequestSchema, async (request) => {
    const tool = tools.find((tool2) => tool2.schema.name === request.params.name);
    if (!tool) {
      return {
        content: [{ type: "text", text: `Tool "${request.params.name}" not found` }],
        isError: true
      };
    }
    const modalStates = context.modalStates().map((state) => state.type);
    if (tool.clearsModalState && !modalStates.includes(tool.clearsModalState) || !tool.clearsModalState && modalStates.length) {
      const text = [
        `Tool "${request.params.name}" does not handle the modal state.`,
        ...context.modalStatesMarkdown()
      ].join("\n");
      return {
        content: [{ type: "text", text }],
        isError: true
      };
    }
    try {
      return await context.run(tool, request.params.arguments);
    } catch (error) {
      return {
        content: [{ type: "text", text: String(error) }],
        isError: true
      };
    }
  });
  server.setRequestHandler(ReadResourceRequestSchema, async (request) => {
    const resource = resources.find((resource2) => resource2.schema.uri === request.params.uri);
    if (!resource)
      return { contents: [] };
    const contents = await resource.read(context, request.params.uri);
    return { contents };
  });
  const oldClose = server.close.bind(server);
  server.close = async () => {
    await oldClose();
    await context.close();
  };
  return server;
}

export { createServerWithTools };
