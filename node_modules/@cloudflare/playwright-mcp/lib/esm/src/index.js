import require$$0 from '../cloudflare/package.json.js';
import path from 'node:path';
import os from 'node:os';
import fs from '@cloudflare/playwright/fs';
import { createServerWithTools } from './server.js';
import common from './tools/common.js';
import console from './tools/console.js';
import dialogs from './tools/dialogs.js';
import files from './tools/files.js';
import install from './tools/install.js';
import keyboard from './tools/keyboard.js';
import navigate from './tools/navigate.js';
import network from './tools/network.js';
import pdf from './tools/pdf.js';
import snapshot from './tools/snapshot.js';
import tabs from './tools/tabs.js';
import screen from './tools/screen.js';

const snapshotTools = [
  ...common(true),
  ...console,
  ...dialogs(true),
  ...files(true),
  ...install,
  ...keyboard(true),
  ...navigate(true),
  ...network,
  ...pdf,
  ...snapshot,
  ...tabs(true)
];
const screenshotTools = [
  ...common(false),
  ...console,
  ...dialogs(false),
  ...files(false),
  ...install,
  ...keyboard(false),
  ...navigate(false),
  ...network,
  ...pdf,
  ...screen,
  ...tabs(false)
];
const packageJSON = require$$0;
async function createServer(options) {
  let browserName;
  let channel;
  switch (options?.browser) {
    case "chrome":
    case "chrome-beta":
    case "chrome-canary":
    case "chrome-dev":
    case "msedge":
    case "msedge-beta":
    case "msedge-canary":
    case "msedge-dev":
      browserName = "chromium";
      channel = options.browser;
      break;
    case "chromium":
      browserName = "chromium";
      break;
    case "firefox":
      browserName = "firefox";
      break;
    case "webkit":
      browserName = "webkit";
      break;
    default:
      browserName = "chromium";
      channel = "chrome";
  }
  const userDataDir = options?.userDataDir ?? await createUserDataDir(browserName);
  const launchOptions = {
    headless: !!(options?.headless ?? (os.platform() === "linux" && !process.env.DISPLAY)),
    channel,
    executablePath: options?.executablePath
  };
  const allTools = options?.vision ? screenshotTools : snapshotTools;
  const tools = allTools.filter((tool) => !options?.capabilities || tool.capability === "core" || options.capabilities.includes(tool.capability));
  return createServerWithTools({
    name: "Playwright",
    version: packageJSON.version,
    tools,
    resources: [],
    browserName,
    userDataDir,
    launchOptions,
    cdpEndpoint: options?.cdpEndpoint
  });
}
async function createUserDataDir(browserName) {
  let cacheDirectory;
  if (process.platform === "linux")
    cacheDirectory = process.env.XDG_CACHE_HOME || path.join(os.homedir(), ".cache");
  else if (process.platform === "darwin")
    cacheDirectory = path.join(os.homedir(), "Library", "Caches");
  else if (process.platform === "win32")
    cacheDirectory = process.env.LOCALAPPDATA || path.join(os.homedir(), "AppData", "Local");
  else
    throw new Error("Unsupported platform: " + process.platform);
  const result = path.join(cacheDirectory, "ms-playwright", `mcp-${browserName}-profile`);
  await fs.promises.mkdir(result, { recursive: true });
  return result;
}

export { createServer };
