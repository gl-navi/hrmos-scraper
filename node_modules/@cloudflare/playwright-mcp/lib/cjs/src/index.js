'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const _package = require('../cloudflare/package.json.js');
const path = require('node:path');
const os = require('node:os');
const fs = require('@cloudflare/playwright/fs');
const server = require('./server.js');
const common = require('./tools/common.js');
const console = require('./tools/console.js');
const dialogs = require('./tools/dialogs.js');
const files = require('./tools/files.js');
const install = require('./tools/install.js');
const keyboard = require('./tools/keyboard.js');
const navigate = require('./tools/navigate.js');
const network = require('./tools/network.js');
const pdf = require('./tools/pdf.js');
const snapshot = require('./tools/snapshot.js');
const tabs = require('./tools/tabs.js');
const screen = require('./tools/screen.js');

const snapshotTools = [
  ...common.default(true),
  ...console.default,
  ...dialogs.default(true),
  ...files.default(true),
  ...install.default,
  ...keyboard.default(true),
  ...navigate.default(true),
  ...network.default,
  ...pdf.default,
  ...snapshot.default,
  ...tabs.default(true)
];
const screenshotTools = [
  ...common.default(false),
  ...console.default,
  ...dialogs.default(false),
  ...files.default(false),
  ...install.default,
  ...keyboard.default(false),
  ...navigate.default(false),
  ...network.default,
  ...pdf.default,
  ...screen.default,
  ...tabs.default(false)
];
const packageJSON = _package.default;
async function createServer(options) {
  let browserName;
  let channel;
  switch (options?.browser) {
    case "chrome":
    case "chrome-beta":
    case "chrome-canary":
    case "chrome-dev":
    case "msedge":
    case "msedge-beta":
    case "msedge-canary":
    case "msedge-dev":
      browserName = "chromium";
      channel = options.browser;
      break;
    case "chromium":
      browserName = "chromium";
      break;
    case "firefox":
      browserName = "firefox";
      break;
    case "webkit":
      browserName = "webkit";
      break;
    default:
      browserName = "chromium";
      channel = "chrome";
  }
  const userDataDir = options?.userDataDir ?? await createUserDataDir(browserName);
  const launchOptions = {
    headless: !!(options?.headless ?? (os.platform() === "linux" && !process.env.DISPLAY)),
    channel,
    executablePath: options?.executablePath
  };
  const allTools = options?.vision ? screenshotTools : snapshotTools;
  const tools = allTools.filter((tool) => !options?.capabilities || tool.capability === "core" || options.capabilities.includes(tool.capability));
  return server.createServerWithTools({
    name: "Playwright",
    version: packageJSON.version,
    tools,
    resources: [],
    browserName,
    userDataDir,
    launchOptions,
    cdpEndpoint: options?.cdpEndpoint
  });
}
async function createUserDataDir(browserName) {
  let cacheDirectory;
  if (process.platform === "linux")
    cacheDirectory = process.env.XDG_CACHE_HOME || path.join(os.homedir(), ".cache");
  else if (process.platform === "darwin")
    cacheDirectory = path.join(os.homedir(), "Library", "Caches");
  else if (process.platform === "win32")
    cacheDirectory = process.env.LOCALAPPDATA || path.join(os.homedir(), "AppData", "Local");
  else
    throw new Error("Unsupported platform: " + process.platform);
  const result = path.join(cacheDirectory, "ms-playwright", `mcp-${browserName}-profile`);
  await fs.promises.mkdir(result, { recursive: true });
  return result;
}

exports.createServer = createServer;
