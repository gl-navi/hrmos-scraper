'use strict';

Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: 'Module' } });

const zod = require('zod');
const tool = require('./tool.js');

const wait = (captureSnapshot) => tool.defineTool({
  capability: "wait",
  schema: {
    name: "browser_wait",
    description: "Wait for a specified time in seconds",
    inputSchema: zod.z.object({
      time: zod.z.coerce.number().describe("The time to wait in seconds")
    })
  },
  handle: async (context, params) => {
    await new Promise((f) => setTimeout(f, Math.min(1e4, params.time * 1e3)));
    return {
      code: [`// Waited for ${params.time} seconds`],
      captureSnapshot,
      waitForNetwork: false
    };
  }
});
const close = tool.defineTool({
  capability: "core",
  schema: {
    name: "browser_close",
    description: "Close the page",
    inputSchema: zod.z.object({})
  },
  handle: async (context) => {
    await context.close();
    return {
      code: [`// Internal to close the page`],
      captureSnapshot: false,
      waitForNetwork: false
    };
  }
});
const resize = (captureSnapshot) => tool.defineTool({
  capability: "core",
  schema: {
    name: "browser_resize",
    description: "Resize the browser window",
    inputSchema: zod.z.object({
      width: zod.z.coerce.number().describe("Width of the browser window"),
      height: zod.z.coerce.number().describe("Height of the browser window")
    })
  },
  handle: async (context, params) => {
    const tab = context.currentTabOrDie();
    const code = [
      `// Resize browser window to ${params.width}x${params.height}`,
      `await page.setViewportSize({ width: ${params.width}, height: ${params.height} });`
    ];
    const action = async () => {
      await tab.page.setViewportSize({ width: params.width, height: params.height });
    };
    return {
      code,
      action,
      captureSnapshot,
      waitForNetwork: true
    };
  }
});
const common = (captureSnapshot) => [
  close,
  wait(captureSnapshot),
  resize(captureSnapshot)
];

exports.default = common;
