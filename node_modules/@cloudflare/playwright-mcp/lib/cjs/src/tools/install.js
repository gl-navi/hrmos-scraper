'use strict';

Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: 'Module' } });

const node_child_process = require('node:child_process');
const path = require('node:path');
const zod = require('zod');
const tool = require('./tool.js');

const install = tool.defineTool({
  capability: "install",
  schema: {
    name: "browser_install",
    description: "Install the browser specified in the config. Call this if you get an error about the browser not being installed.",
    inputSchema: zod.z.object({})
  },
  handle: async (context) => {
    const channel = context.options.launchOptions?.channel ?? context.options.browserName ?? "chrome";
    const cli = path.join(require.resolve("playwright/package.json"), "..", "cli.js");
    const child = node_child_process.fork(cli, ["install", channel], {
      stdio: "pipe"
    });
    const output = [];
    child.stdout?.on("data", (data) => output.push(data.toString()));
    child.stderr?.on("data", (data) => output.push(data.toString()));
    await new Promise((resolve, reject) => {
      child.on("close", (code) => {
        if (code === 0)
          resolve();
        else
          reject(new Error(`Failed to install browser: ${output.join("")}`));
      });
    });
    return {
      code: [`// Browser ${channel} installed`],
      captureSnapshot: false,
      waitForNetwork: false
    };
  }
});
const install$1 = [
  install
];

exports.default = install$1;
