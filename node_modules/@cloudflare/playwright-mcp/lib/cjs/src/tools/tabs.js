'use strict';

Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: 'Module' } });

const zod = require('zod');
const tool = require('./tool.js');

const listTabs = tool.defineTool({
  capability: "tabs",
  schema: {
    name: "browser_tab_list",
    description: "List browser tabs",
    inputSchema: zod.z.object({})
  },
  handle: async (context) => {
    await context.ensureTab();
    return {
      code: [`// <internal code to list tabs>`],
      captureSnapshot: false,
      waitForNetwork: false,
      resultOverride: {
        content: [{
          type: "text",
          text: await context.listTabsMarkdown()
        }]
      }
    };
  }
});
const selectTab = (captureSnapshot) => tool.defineTool({
  capability: "tabs",
  schema: {
    name: "browser_tab_select",
    description: "Select a tab by index",
    inputSchema: zod.z.object({
      index: zod.z.coerce.number().describe("The index of the tab to select")
    })
  },
  handle: async (context, params) => {
    await context.selectTab(params.index);
    const code = [
      `// <internal code to select tab ${params.index}>`
    ];
    return {
      code,
      captureSnapshot,
      waitForNetwork: false
    };
  }
});
const newTab = (captureSnapshot) => tool.defineTool({
  capability: "tabs",
  schema: {
    name: "browser_tab_new",
    description: "Open a new tab",
    inputSchema: zod.z.object({
      url: zod.z.string().optional().describe("The URL to navigate to in the new tab. If not provided, the new tab will be blank.")
    })
  },
  handle: async (context, params) => {
    await context.newTab();
    if (params.url)
      await context.currentTabOrDie().navigate(params.url);
    const code = [
      `// <internal code to open a new tab>`
    ];
    return {
      code,
      captureSnapshot,
      waitForNetwork: false
    };
  }
});
const closeTab = (captureSnapshot) => tool.defineTool({
  capability: "tabs",
  schema: {
    name: "browser_tab_close",
    description: "Close a tab",
    inputSchema: zod.z.object({
      index: zod.z.coerce.number().optional().describe("The index of the tab to close. Closes current tab if not provided.")
    })
  },
  handle: async (context, params) => {
    await context.closeTab(params.index);
    const code = [
      `// <internal code to close tab ${params.index}>`
    ];
    return {
      code,
      captureSnapshot,
      waitForNetwork: false
    };
  }
});
const tabs = (captureSnapshot) => [
  listTabs,
  newTab(captureSnapshot),
  selectTab(captureSnapshot),
  closeTab(captureSnapshot)
];

exports.default = tabs;
