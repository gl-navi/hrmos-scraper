'use strict';

Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: 'Module' } });

const zod = require('zod');
const tool = require('./tool.js');
const javascript = require('../javascript.js');

const elementSchema = zod.z.object({
  element: zod.z.string().describe("Human-readable element description used to obtain permission to interact with the element")
});
const screenshot = tool.defineTool({
  capability: "core",
  schema: {
    name: "browser_screen_capture",
    description: "Take a screenshot of the current page",
    inputSchema: zod.z.object({})
  },
  handle: async (context) => {
    const tab = await context.ensureTab();
    const options = { type: "jpeg", quality: 50, scale: "css" };
    const code = [
      `// Take a screenshot of the current page`,
      `await page.screenshot(${javascript.formatObject(options)});`
    ];
    const action = () => tab.page.screenshot(options).then((buffer) => {
      return {
        content: [{ type: "image", data: buffer.toString("base64"), mimeType: "image/jpeg" }]
      };
    });
    return {
      code,
      action,
      captureSnapshot: false,
      waitForNetwork: false
    };
  }
});
const moveMouse = tool.defineTool({
  capability: "core",
  schema: {
    name: "browser_screen_move_mouse",
    description: "Move mouse to a given position",
    inputSchema: elementSchema.extend({
      x: zod.z.coerce.number().describe("X coordinate"),
      y: zod.z.coerce.number().describe("Y coordinate")
    })
  },
  handle: async (context, params) => {
    const tab = context.currentTabOrDie();
    const code = [
      `// Move mouse to (${params.x}, ${params.y})`,
      `await page.mouse.move(${params.x}, ${params.y});`
    ];
    const action = () => tab.page.mouse.move(params.x, params.y);
    return {
      code,
      action,
      captureSnapshot: false,
      waitForNetwork: false
    };
  }
});
const click = tool.defineTool({
  capability: "core",
  schema: {
    name: "browser_screen_click",
    description: "Click left mouse button",
    inputSchema: elementSchema.extend({
      x: zod.z.coerce.number().describe("X coordinate"),
      y: zod.z.coerce.number().describe("Y coordinate")
    })
  },
  handle: async (context, params) => {
    const tab = context.currentTabOrDie();
    const code = [
      `// Click mouse at coordinates (${params.x}, ${params.y})`,
      `await page.mouse.move(${params.x}, ${params.y});`,
      `await page.mouse.down();`,
      `await page.mouse.up();`
    ];
    const action = async () => {
      await tab.page.mouse.move(params.x, params.y);
      await tab.page.mouse.down();
      await tab.page.mouse.up();
    };
    return {
      code,
      action,
      captureSnapshot: false,
      waitForNetwork: true
    };
  }
});
const drag = tool.defineTool({
  capability: "core",
  schema: {
    name: "browser_screen_drag",
    description: "Drag left mouse button",
    inputSchema: elementSchema.extend({
      startX: zod.z.coerce.number().describe("Start X coordinate"),
      startY: zod.z.coerce.number().describe("Start Y coordinate"),
      endX: zod.z.coerce.number().describe("End X coordinate"),
      endY: zod.z.coerce.number().describe("End Y coordinate")
    })
  },
  handle: async (context, params) => {
    const tab = context.currentTabOrDie();
    const code = [
      `// Drag mouse from (${params.startX}, ${params.startY}) to (${params.endX}, ${params.endY})`,
      `await page.mouse.move(${params.startX}, ${params.startY});`,
      `await page.mouse.down();`,
      `await page.mouse.move(${params.endX}, ${params.endY});`,
      `await page.mouse.up();`
    ];
    const action = async () => {
      await tab.page.mouse.move(params.startX, params.startY);
      await tab.page.mouse.down();
      await tab.page.mouse.move(params.endX, params.endY);
      await tab.page.mouse.up();
    };
    return {
      code,
      action,
      captureSnapshot: false,
      waitForNetwork: true
    };
  }
});
const type = tool.defineTool({
  capability: "core",
  schema: {
    name: "browser_screen_type",
    description: "Type text",
    inputSchema: zod.z.object({
      text: zod.z.string().describe("Text to type into the element"),
      submit: zod.z.coerce.boolean().optional().describe("Whether to submit entered text (press Enter after)")
    })
  },
  handle: async (context, params) => {
    const tab = context.currentTabOrDie();
    const code = [
      `// Type ${params.text}`,
      `await page.keyboard.type('${params.text}');`
    ];
    const action = async () => {
      await tab.page.keyboard.type(params.text);
      if (params.submit)
        await tab.page.keyboard.press("Enter");
    };
    if (params.submit) {
      code.push(`// Submit text`);
      code.push(`await page.keyboard.press('Enter');`);
    }
    return {
      code,
      action,
      captureSnapshot: false,
      waitForNetwork: true
    };
  }
});
const screen = [
  screenshot,
  moveMouse,
  click,
  drag,
  type
];

exports.default = screen;
